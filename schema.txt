
# CiteQuotes Database Schema Documentation
# Generated: 2025-01-19 (Updated with Current Implementation)
# Database: Supabase PostgreSQL
# Project: yrafjktkkspcptkcaowj

================================================================================
DATABASE OVERVIEW
================================================================================

CiteQuotes is a quote verification and research platform that focuses on accurate
historical attribution and evidence-based sourcing. The database is designed to:

- Store verified quotes with proper attribution and context
- Manage user roles and privileges for content moderation
- Support multi-language translations of quotes
- Track quote usage and citations across the web
- Organize quotes by topics and themes
- Store original source documents and references
- Generate content variations and paraphrases
- Integrate with IIIF viewers for manuscript examination
- Handle evidence image uploads with proper attribution

**SECURITY STATUS**: All tables have comprehensive Row Level Security (RLS)
policies implemented to ensure proper data access control and prevent unauthorized
modifications.

================================================================================
STORAGE CONFIGURATION
================================================================================

**Storage Buckets:**
- `quote_evidence` - Stores evidence images for quote submissions with attribution metadata
  - Public access enabled for reading uploaded evidence
  - Authenticated users can upload files
  - Files include metadata for fair use and attribution

================================================================================
SECURITY IMPLEMENTATION
================================================================================

**Row Level Security (RLS) Status:**
- ALL tables have RLS enabled
- Write operations require authentication for all content tables
- Admin-only operations are protected by privilege checking functions
- Audit logging implemented for all administrative actions

**Authentication Requirements:**
- All write operations require authenticated users
- Admin operations require verified admin/super_admin privileges
- Rate limiting implemented on sensitive operations (5 quote submissions/min)
- Input validation and sanitization on all user inputs

**Privilege Hierarchy:**
1. user (default) - Read access, can create content when authenticated
2. moderator - Enhanced content management (planned)
3. admin - User management, system configuration
4. super_admin - Full system access including admin management

================================================================================
ENUMS
================================================================================

user_privilege:
  Values: 'user', 'moderator', 'admin', 'super_admin'
  Purpose: Hierarchical privilege system for access control

================================================================================
TABLES STRUCTURE
================================================================================

1. PROFILES TABLE
----------------
Table: public.profiles
Purpose: User profile information and metadata

Columns:
- id              | uuid                     | NOT NULL, PRIMARY KEY
- username        | text                     | NULLABLE, UNIQUE
- full_name       | text                     | NULLABLE
- avatar_url      | text                     | NULLABLE
- created_at      | timestamp with time zone | NOT NULL, DEFAULT now()
- updated_at      | timestamp with time zone | NOT NULL, DEFAULT now()

Constraints:
- PRIMARY KEY (id)
- UNIQUE (username)
- FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE

RLS Status: ENABLED
Policies:
- "Users can view all profiles" (SELECT) - Public read access
- "Users can update their own profile" (UPDATE) - Self-modification only
- "Users can insert their own profile" (INSERT) - Self-creation only

2. USER_ROLES TABLE
------------------
Table: public.user_roles
Purpose: User privilege management and role assignment

Columns:
- id              | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- user_id         | uuid                     | NOT NULL, UNIQUE
- privilege       | user_privilege           | NOT NULL, DEFAULT 'user'::user_privilege
- assigned_by     | uuid                     | NULLABLE
- assigned_at     | timestamp with time zone | NOT NULL, DEFAULT now()
- updated_at      | timestamp with time zone | NOT NULL, DEFAULT now()
- display_name    | text                     | NULLABLE

Constraints:
- PRIMARY KEY (id)
- UNIQUE (user_id)
- FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
- FOREIGN KEY (assigned_by) REFERENCES auth.users(id)

RLS Status: ENABLED
Policies:
- "Users can view their own role" (SELECT) - Self-access only
- "Admins can view all roles" (SELECT) - Admin privilege required
- "Super admins can manage all roles" (ALL) - Super admin privilege required
- "Admins can manage lower roles" (UPDATE) - Complex hierarchy enforcement

3. ADMIN_AUDIT_LOG TABLE
-----------------------
Table: public.admin_audit_log
Purpose: Security audit logging for administrative actions

Columns:
- id              | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- admin_user_id   | uuid                     | NOT NULL
- action          | text                     | NOT NULL
- target_user_id  | uuid                     | NULLABLE
- old_values      | jsonb                    | NULLABLE
- new_values      | jsonb                    | NULLABLE
- timestamp       | timestamp with time zone | NOT NULL, DEFAULT now()

Constraints:
- PRIMARY KEY (id)
- FOREIGN KEY (admin_user_id) REFERENCES auth.users(id)
- FOREIGN KEY (target_user_id) REFERENCES auth.users(id)

RLS Status: ENABLED
Policies:
- "Admins can view audit logs" (SELECT) - Admin privilege required
- "System can insert audit logs" (INSERT) - System-level logging

4. QUOTES TABLE
--------------
Table: public.quotes
Purpose: Main quotes storage with metadata and context

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- quote_text            | text                     | NOT NULL
- author_name           | text                     | NULLABLE
- date_original         | date                     | NULLABLE
- quote_context         | text                     | NULLABLE
- quote_image_url       | text                     | NULLABLE
- source_id             | uuid                     | NULLABLE
- seo_keywords          | text[]                   | NULLABLE
- seo_slug              | text                     | NULLABLE
- inserted_at           | timestamp with time zone | NULLABLE, DEFAULT now()
- updated_at            | timestamp with time zone | NULLABLE, DEFAULT now()

Constraints:
- PRIMARY KEY (id)
- FOREIGN KEY (source_id) REFERENCES original_sources(id)

RLS Status: ENABLED
Policies:
- "Enable read access for all users" (SELECT) - Public read access
- "Authenticated users can create quotes" (INSERT) - Requires authentication
- "Authenticated users can update quotes" (UPDATE) - Requires authentication

5. ORIGINAL_SOURCES TABLE
------------------------
Table: public.original_sources
Purpose: Source documents and attribution information

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT extensions.uuid_generate_v4()
- title                 | text                     | NULLABLE
- author                | text                     | NULLABLE
- publisher             | text                     | NULLABLE
- publication_year      | text                     | NULLABLE
- edition               | text                     | NULLABLE
- source_type           | text                     | NULLABLE
- archive_url           | text                     | NULLABLE
- page_reference        | text                     | NULLABLE
- language              | text                     | NULLABLE
- notes                 | text                     | NULLABLE
- verified_by           | text                     | NULLABLE
- created_at            | timestamp with time zone | NULLABLE, DEFAULT now()

Constraints:
- PRIMARY KEY (id)

RLS Status: ENABLED
Policies:
- "Anyone can view original sources" (SELECT) - Public read access
- "Authenticated users can create original sources" (INSERT) - Requires authentication
- "Authenticated users can update original sources" (UPDATE) - Requires authentication

6. TOPICS TABLE
--------------
Table: public.topics
Purpose: Topic/theme categorization system

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT extensions.uuid_generate_v4()
- topic_name            | text                     | NULLABLE
- seo_slug              | text                     | NULLABLE

Constraints:
- PRIMARY KEY (id)

RLS Status: ENABLED
Policies:
- "Anyone can view topics" (SELECT) - Public read access
- "Admins can manage topics" (ALL) - Admin privilege required for modifications

7. IIIF_MANIFESTS TABLE
-----------------------
Table: public.iiif_manifests
Purpose: IIIF manifest URLs for manuscript viewing

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- title                 | text                     | NOT NULL
- manifest_url          | text                     | NOT NULL
- host_name             | text                     | NOT NULL
- created_at            | timestamp with time zone | NOT NULL, DEFAULT now()

Constraints:
- PRIMARY KEY (id)

RLS Status: ENABLED
Policies:
- "Anyone can view IIIF manifests" (SELECT) - Public read access
- "Admins can manage IIIF manifests" (ALL) - Admin privilege required for modifications

8. ADDITIONAL TABLES
-------------------

**quote_genconten** - Generated content variations
RLS: Public read, authenticated write

**quote_paraphrases** - Quote paraphrases and variations
RLS: Public read, authenticated write

**cited_by** - Citation tracking across websites
RLS: Public read, authenticated write

**quote_topics** - Many-to-many relationship between quotes and topics
RLS: Public read, authenticated write

**translations** - Multi-language quote translations
RLS: Public read, authenticated write

================================================================================
SECURITY FUNCTIONS
================================================================================

1. **secure_update_user_privilege**(target_user_id, new_privilege, admin_user_id)
   - Purpose: Securely update user privileges with proper authorization
   - Security: DEFINER, validates privilege hierarchy, logs all actions
   - Returns: boolean indicating success/failure

2. **get_users_for_admin**(requesting_user_id)
   - Purpose: Safely retrieve user list for admin interface
   - Security: DEFINER, requires admin privileges
   - Returns: Table of user data with privileges

3. **get_user_privilege**(user_id) RETURNS user_privilege
   - Purpose: Get the privilege level for a specific user
   - Security: DEFINER, STABLE

4. **has_privilege_level**(user_id, required_level) RETURNS boolean
   - Purpose: Check if user has specified privilege level or higher
   - Security: DEFINER, STABLE

================================================================================
SECURITY BEST PRACTICES IMPLEMENTED
================================================================================

1. **Input Validation & Sanitization:**
   - Server-side validation using Zod schemas
   - XSS prevention through content sanitization
   - SQL injection prevention through parameterized queries
   - URL validation and protocol restrictions (HTTP/HTTPS only)

2. **Rate Limiting:**
   - Quote submission: 5 per minute per user
   - Admin actions: 10 per minute per admin
   - Prevents spam and abuse

3. **Audit Logging:**
   - All administrative actions logged with timestamps
   - Old/new values tracked for changes
   - Admin user identification for accountability

4. **Privilege Validation:**
   - Server-side privilege checking
   - Hierarchy enforcement (admins cannot escalate to super_admin)
   - Self-modification prevention

5. **Authentication Requirements:**
   - All write operations require authentication
   - Session validation on sensitive operations
   - Proper error handling without information disclosure

6. **File Upload Security:**
   - Evidence images stored with attribution metadata
   - Fair use justification included
   - Controlled access through storage policies

================================================================================
API INTEGRATION
================================================================================

**Secure Quote Creation:**
- Uses `createQuote()` function with comprehensive validation
- Rate limiting and authentication checks
- Input sanitization and XSS prevention
- Attribution metadata for uploaded images

**User Role Management:**
- Secure functions for privilege updates
- Audit logging for all admin actions
- Proper hierarchy enforcement

================================================================================
END OF SCHEMA DOCUMENTATION
================================================================================
