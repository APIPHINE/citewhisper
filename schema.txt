
# CiteQuotes Database Schema Documentation
# Generated: 2025-01-19 (Updated with Security Enhancements)
# Database: Supabase PostgreSQL
# Project: yrafjktkkspcptkcaowj

================================================================================
DATABASE OVERVIEW
================================================================================

CiteQuotes is a quote verification and research platform that focuses on accurate
historical attribution and evidence-based sourcing. The database is designed to:

- Store verified quotes with proper attribution and context
- Manage user roles and privileges for content moderation
- Support multi-language translations of quotes
- Track quote usage and citations across the web
- Organize quotes by topics and themes
- Store original source documents and references
- Generate content variations and paraphrases
- Integrate with IIIF viewers for manuscript examination

**SECURITY UPDATE**: All tables now have comprehensive Row Level Security (RLS)
policies implemented to ensure proper data access control and prevent unauthorized
modifications.

================================================================================
SECURITY IMPLEMENTATION
================================================================================

**Row Level Security (RLS) Status:**
- ALL tables now have RLS enabled
- Write operations require authentication for all content tables
- Admin-only operations are protected by privilege checking functions
- Audit logging implemented for all administrative actions

**Authentication Requirements:**
- All write operations require authenticated users
- Admin operations require verified admin/super_admin privileges
- Rate limiting implemented on sensitive operations
- Input validation and sanitization on all user inputs

**Privilege Hierarchy:**
1. user (default) - Read access, can create content when authenticated
2. moderator - Enhanced content management (planned)
3. admin - User management, system configuration
4. super_admin - Full system access including admin management

================================================================================
ENUMS
================================================================================

user_privilege:
  Values: 'user', 'moderator', 'admin', 'super_admin'
  Purpose: Hierarchical privilege system for access control

================================================================================
TABLES STRUCTURE
================================================================================

1. PROFILES TABLE
----------------
Table: public.profiles
Purpose: User profile information and metadata

Columns:
- id              | uuid                     | NOT NULL, PRIMARY KEY
- username        | text                     | NULLABLE, UNIQUE
- full_name       | text                     | NULLABLE
- avatar_url      | text                     | NULLABLE
- created_at      | timestamp with time zone | NOT NULL, DEFAULT now()
- updated_at      | timestamp with time zone | NOT NULL, DEFAULT now()

Constraints:
- PRIMARY KEY (id)
- UNIQUE (username)
- FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE

RLS Status: ENABLED
Policies:
- "Users can view all profiles" (SELECT) - USING (true)
- "Users can update their own profile" (UPDATE) - USING (auth.uid() = id)
- "Users can insert their own profile" (INSERT) - WITH CHECK (auth.uid() = id)

2. USER_ROLES TABLE
------------------
Table: public.user_roles
Purpose: User privilege management and role assignment

Columns:
- id              | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- user_id         | uuid                     | NOT NULL
- privilege       | user_privilege           | NOT NULL, DEFAULT 'user'::user_privilege
- assigned_by     | uuid                     | NULLABLE
- assigned_at     | timestamp with time zone | NOT NULL, DEFAULT now()
- updated_at      | timestamp with time zone | NOT NULL, DEFAULT now()
- display_name    | text                     | NULLABLE

Constraints:
- PRIMARY KEY (id)
- UNIQUE (user_id)
- FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
- FOREIGN KEY (assigned_by) REFERENCES auth.users(id)

RLS Status: ENABLED
Policies:
- "Users can view their own role" (SELECT) - USING (auth.uid() = user_id)
- "Admins can view all roles" (SELECT) - USING (public.has_privilege_level(auth.uid(), 'admin'))
- "Super admins can manage all roles" (ALL) - USING/WITH CHECK (public.has_privilege_level(auth.uid(), 'super_admin'))
- "Admins can manage lower roles" (UPDATE) - Complex policy for admin role management

3. ADMIN_AUDIT_LOG TABLE (NEW)
-----------------------------
Table: public.admin_audit_log
Purpose: Security audit logging for administrative actions

Columns:
- id              | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- admin_user_id   | uuid                     | NOT NULL
- action          | text                     | NOT NULL
- target_user_id  | uuid                     | NULLABLE
- old_values      | jsonb                    | NULLABLE
- new_values      | jsonb                    | NULLABLE
- timestamp       | timestamp with time zone | NOT NULL, DEFAULT now()

Constraints:
- PRIMARY KEY (id)
- FOREIGN KEY (admin_user_id) REFERENCES auth.users(id)
- FOREIGN KEY (target_user_id) REFERENCES auth.users(id)

RLS Status: ENABLED
Policies:
- "Admins can view audit logs" (SELECT) - USING (public.has_privilege_level(auth.uid(), 'admin'))
- "System can insert audit logs" (INSERT) - WITH CHECK (true)

4. QUOTES TABLE
--------------
Table: public.quotes
Purpose: Main quotes storage with metadata and context

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- quote_text            | text                     | NOT NULL
- author_name           | text                     | NULLABLE
- date_original         | date                     | NULLABLE
- quote_context         | text                     | NULLABLE
- quote_image_url       | text                     | NULLABLE
- source_id             | uuid                     | NULLABLE
- seo_keywords          | text[]                   | NULLABLE
- seo_slug              | text                     | NULLABLE
- inserted_at           | timestamp with time zone | NULLABLE, DEFAULT now()
- updated_at            | timestamp with time zone | NULLABLE, DEFAULT now()

Constraints:
- PRIMARY KEY (id)
- FOREIGN KEY (source_id) REFERENCES original_sources(id)

RLS Status: ENABLED (Updated)
Policies:
- Public read access for all quotes
- "Authenticated users can create quotes" (INSERT) - TO authenticated WITH CHECK (true)
- "Authenticated users can update quotes" (UPDATE) - TO authenticated USING (true)

5. ORIGINAL_SOURCES TABLE
------------------------
Table: public.original_sources
Purpose: Source documents and attribution information

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT extensions.uuid_generate_v4()
- title                 | text                     | NULLABLE
- author                | text                     | NULLABLE
- publisher             | text                     | NULLABLE
- publication_year      | text                     | NULLABLE
- edition               | text                     | NULLABLE
- source_type           | text                     | NULLABLE
- archive_url           | text                     | NULLABLE
- page_reference        | text                     | NULLABLE
- language              | text                     | NULLABLE
- notes                 | text                     | NULLABLE
- verified_by           | text                     | NULLABLE
- created_at            | timestamp with time zone | NULLABLE, DEFAULT now()

Constraints:
- PRIMARY KEY (id)

RLS Status: ENABLED (New)
Policies:
- "Anyone can view original sources" (SELECT) - USING (true)
- "Authenticated users can create original sources" (INSERT) - TO authenticated WITH CHECK (true)
- "Authenticated users can update original sources" (UPDATE) - TO authenticated USING (true)

6. TOPICS TABLE
--------------
Table: public.topics
Purpose: Topic/theme categorization system

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT extensions.uuid_generate_v4()
- topic_name            | text                     | NULLABLE
- seo_slug              | text                     | NULLABLE

Constraints:
- PRIMARY KEY (id)

RLS Status: ENABLED (New)
Policies:
- "Anyone can view topics" (SELECT) - USING (true)
- "Admins can manage topics" (ALL) - TO authenticated USING/WITH CHECK (public.has_privilege_level(auth.uid(), 'admin'))

7. IIIF_MANIFESTS TABLE
-----------------------
Table: public.iiif_manifests
Purpose: IIIF manifest URLs for manuscript viewing

Columns:
- id                    | uuid                     | NOT NULL, PRIMARY KEY, DEFAULT gen_random_uuid()
- title                 | text                     | NOT NULL
- manifest_url          | text                     | NOT NULL
- host_name             | text                     | NOT NULL
- created_at            | timestamp with time zone | NOT NULL, DEFAULT now()

Constraints:
- PRIMARY KEY (id)

RLS Status: ENABLED (New)
Policies:
- "Anyone can view IIIF manifests" (SELECT) - USING (true)
- "Admins can manage IIIF manifests" (ALL) - TO authenticated USING/WITH CHECK (public.has_privilege_level(auth.uid(), 'admin'))

[Additional tables continue with similar RLS policy implementations...]

================================================================================
SECURITY FUNCTIONS (NEW)
================================================================================

1. secure_update_user_privilege(target_user_id uuid, new_privilege user_privilege, admin_user_id uuid)
   Purpose: Securely update user privileges with proper authorization and audit logging
   Security: DEFINER, validates privilege hierarchy, logs all actions
   
2. get_users_for_admin(requesting_user_id uuid)
   Purpose: Safely retrieve user list for admin interface without exposing sensitive auth data
   Security: DEFINER, requires admin privileges, joins with profiles table

3. get_user_privilege(user_id uuid) RETURNS user_privilege
   Purpose: Get the privilege level for a specific user
   Security: DEFINER, STABLE
   
4. has_privilege_level(user_id uuid, required_level user_privilege) RETURNS boolean
   Purpose: Check if user has specified privilege level or higher
   Security: DEFINER, STABLE

================================================================================
SECURITY BEST PRACTICES IMPLEMENTED
================================================================================

1. **Input Validation & Sanitization:**
   - Server-side validation for all user inputs
   - XSS prevention through HTML encoding
   - SQL injection prevention through parameterized queries
   - URL validation and protocol restrictions

2. **Rate Limiting:**
   - Quote submission: 5 per minute per user
   - Admin actions: 10 per minute per admin
   - Prevents spam and abuse

3. **Audit Logging:**
   - All administrative actions logged with timestamps
   - Old/new values tracked for changes
   - Admin user identification for accountability

4. **Privilege Validation:**
   - Server-side privilege checking
   - Hierarchy enforcement (admins cannot escalate to super_admin)
   - Self-modification prevention

5. **Authentication Requirements:**
   - All write operations require authentication
   - Session validation on sensitive operations
   - Proper error handling without information disclosure

================================================================================
MIGRATION HISTORY
================================================================================

Initial migrations:
- 20250615053803: User profiles and authentication setup
- 20250615104009: User roles and privilege system
- 20250119: Security enhancement migration (RLS policies, audit logging, secure functions)

================================================================================
END OF SCHEMA DOCUMENTATION
================================================================================
